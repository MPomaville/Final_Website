<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on CS631 Final Project</title>
    <link>/blog/</link>
    <description>Recent content in Blog on CS631 Final Project</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Wed, 13 Jun 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>First Graph - Nathans Hot Dog Eating Contest</title>
      <link>/blog/first-graph/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/first-graph/</guid>
      <description>About the Data This plot was created using ggplot2 and other tidyverse packages in RStudio. The data to generate this plot was originally collected, cleaned, and hosted by Jackie Wirz, Steven Bedrick, and Alison Hill here and was modified by Matt Pomaville. The final data set used can be found here
The data used in this plot was collected from the Nathan’s Hot Dog Eating Contest website and Wikipedia page.</description>
    </item>
    
    <item>
      <title>Fourth Graph - How has the MOMA gotten its paintings over the years?</title>
      <link>/blog/fourth-graph/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/fourth-graph/</guid>
      <description>This graph looks at the number of gifted paintings vs the number of paintings acqired through purchase or exchange by the MOMA grouped by decade.
Type of Graph This graph is a stacked column graph.
 The Data This data came from a pre-cleaned version of the Museum of Museum Art data set generated by www.fivethirtyeight.com. It was cleaned by Alison Hill and further modified by Matt Pomaville. It is available here.</description>
    </item>
    
    <item>
      <title>Second Graph - Global GDP per Capita 1952 vs 2007</title>
      <link>/blog/second-graph-global-gdp-per-capita-1952-vs-2007/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/second-graph-global-gdp-per-capita-1952-vs-2007/</guid>
      <description>Change in GDP per Capita graph brief This is a brief describing the graph created from the gapminder dataset. It is available as a CRAN Package by installing gapminder and calling library(gapminder) during setup.
Load required libraries To make this graph I used the tidyverse, gapminder, and wesanderson libraries.
library(tidyverse) library(gapminder) library(wesanderson)  Cleaning up the gapminder data The gapminder dataset is gigantic and because for this plot I was only interested in the 1952 and 2007 data I filtered for only that data.</description>
    </item>
    
    <item>
      <title>Third Graph - Are all continents approaching the global mean life expectancy?</title>
      <link>/blog/third-graph-are-all-continents-approaching-the-global-mean-life-expectancy/</link>
      <pubDate>Wed, 13 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/blog/third-graph-are-all-continents-approaching-the-global-mean-life-expectancy/</guid>
      <description>Life expectancy by continent vs. global mean life expectancy graph brief This is a brief describing the graph created from the gapminder dataset. It is available as a CRAN Package by installing gapminder and calling library(gapminder) during setup.
Load required libraries To make this graph I used the tidyverse, gapminder, and wesanderson libraries.
library(tidyverse) library(gapminder) library(wesanderson) In this visalization I want to examine the relative number of countries in each continent with life expectancies over themean life expectancy in 2007 by year.</description>
    </item>
    
    <item>
      <title>Example article</title>
      <link>/blog/example-article/</link>
      <pubDate>Mon, 28 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/example-article/</guid>
      <description>Text This is some text. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Ut pretium at ipsum eu pharetra. Proin ac ante et leo ultrices bibendum. Vivamus id ipsum fermentum, aliquam nunc mollis, tempus sapien. Praesent scelerisque cursus eros vitae pretium. Etiam sit amet ligula in leo euismod malesuada. Proin eleifend pulvinar ipsum, eu lobortis ante pharetra eu. Vivamus sem elit, venenatis eget ornare nec, ullamcorper non tellus. Duis quis massa finibus, euismod erat quis, fermentum nunc.</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>/blog/hello-r-markdown/</link>
      <pubDate>Thu, 23 Jul 2015 21:13:14 -0500</pubDate>
      
      <guid>/blog/hello-r-markdown/</guid>
      <description>R Markdown This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see http://rmarkdown.rstudio.com.
You can embed an R code chunk like this:
summary(cars) ## speed dist ## Min. : 4.0 Min. : 2.00 ## 1st Qu.:12.0 1st Qu.: 26.00 ## Median :15.0 Median : 36.00 ## Mean :15.4 Mean : 42.98 ## 3rd Qu.</description>
    </item>
    
    <item>
      <title>Creating a New Theme</title>
      <link>/blog/creating-a-new-theme/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/creating-a-new-theme/</guid>
      <description>Introduction This tutorial will show you how to create a simple theme in Hugo. I assume that you are familiar with HTML, the bash command line, and that you are comfortable using Markdown to format content. I&amp;rsquo;ll explain how Hugo uses templates and how you can organize your templates to create a theme. I won&amp;rsquo;t cover using CSS to style your theme.
We&amp;rsquo;ll start with creating a new site with a very basic template.</description>
    </item>
    
    <item>
      <title>(Hu)go Template Primer</title>
      <link>/blog/hugo-template-primer/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/hugo-template-primer/</guid>
      <description>Hugo uses the excellent go html/template library for its template engine. It is an extremely lightweight engine that provides a very small amount of logic. In our experience that it is just the right amount of logic to be able to create a good static website. If you have used other template systems from different languages or frameworks you will find a lot of similarities in go templates.
This document is a brief primer on using go templates.</description>
    </item>
    
    <item>
      <title>Getting Started with Hugo</title>
      <link>/blog/getting-started-with-hugo/</link>
      <pubDate>Wed, 02 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/getting-started-with-hugo/</guid>
      <description>Step 1. Install Hugo Goto hugo releases and download the appropriate version for your os and architecture.
Save it somewhere specific as we will be using it in the next step.
More complete instructions are available at installing hugo
Step 2. Build the Docs Hugo has its own example site which happens to also be the documentation site you are reading right now.
Follow the following steps:
 Clone the hugo repository Go into the repo Run hugo in server mode and build the docs Open your browser to http://localhost:1313  Corresponding pseudo commands:</description>
    </item>
    
  </channel>
</rss>